/* 
 * Arquivo a ser utilizado para criar as tabelas do banco de dados
 */
/**
 * Author:  Vanderlei Fiorentin
 * Created: 26 de dez. de 2021
 */

CREATE TABLE IF NOT EXISTS USUARIOS(
ID_USUARIO SERIAL NOT NULL,
NOME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(50) UNIQUE NOT NULL,
USUARIO VARCHAR(50) UNIQUE NOT NULL,
SENHA VARCHAR(50) NOT NULL,
ADMINISTRADOR BOOLEAN NOT NULL,
ATIVO BOOLEAN DEFAULT TRUE,
CONSTRAINT PK_USUARIOS PRIMARY KEY(ID_USUARIO)
);

COMMENT ON TABLE USUARIOS IS 'Cadastro de usuários';
COMMENT ON COLUMN USUARIOS.ID_USUARIO IS 'Chave primária';
COMMENT ON COLUMN USUARIOS.NOME IS 'Nome do usuário';
COMMENT ON COLUMN USUARIOS.ADMINISTRADOR IS 'Nível do usuário (True - sim, False - não)';
COMMENT ON COLUMN USUARIOS.ATIVO IS 'Status do usuário (True - ativo, False - inativo)';
COMMENT ON COLUMN USUARIOS.USUARIO IS 'Nome de usuário';
COMMENT ON COLUMN USUARIOS.SENHA IS 'Senha do usuário';
COMMENT ON COLUMN USUARIOS.EMAIL IS 'E-mail a ser utilizado para contato, redefinição de senha, etc';

CREATE TABLE IF NOT EXISTS PERFIS_USUARIOS(
ID_PERFIL SERIAL NOT NULL,
ID_USUARIO INTEGER NOT NULL UNIQUE,
INSCRICAO VARCHAR(14) NOT NULL,
DT_NASCTO DATE NOT NULL,
FOTO VARCHAR(50),
AVISO_FATURA_VENCIDA BOOLEAN DEFAULT FALSE,
AVISO_FATURA_AVENCER BOOLEAN DEFAULT FALSE,
CONSTRAINT PK_PERFIS_USUARIOS PRIMARY KEY(ID_PERFIL)
);

COMMENT ON TABLE PERFIS_USUARIOS IS 'Tabela de cadastro de perfis de usuários';
COMMENT ON COLUMN PERFIS_USUARIOS.ID_PERFIL IS 'Chave primária';
COMMENT ON COLUMN PERFIS_USUARIOS.ID_USUARIO IS 'Chave estrangeira';
COMMENT ON COLUMN PERFIS_USUARIOS.INSCRICAO IS 'Cpf ou Cnpj';
COMMENT ON COLUMN PERFIS_USUARIOS.DT_NASCTO IS 'Data de nascimento';
COMMENT ON COLUMN PERFIS_USUARIOS.FOTO IS 'Foto de perfil do usuário';
COMMENT ON COLUMN PERFIS_USUARIOS.AVISO_FATURA_VENCIDA IS 'Enviar e-mail de fatura vencida';
COMMENT ON COLUMN PERFIS_USUARIOS.AVISO_FATURA_AVENCER IS 'Enviar e-mail de fatura a vencer';

CREATE TABLE IF NOT EXISTS CATEGORIAS_PRODUTOS(
ID_CATEGORIA SERIAL NOT NULL,
NOME VARCHAR(50) NOT NULL,
DESCRICAO VARCHAR(100),
CONSTRAINT PK_CATEGORIAS_PRODUTOS PRIMARY KEY(ID_CATEGORIA)
);

COMMENT ON TABLE CATEGORIAS_PRODUTOS IS 'Cadastro de categorias de produtos';
COMMENT ON COLUMN CATEGORIAS_PRODUTOS.ID_CATEGORIA IS 'Chave primária';
COMMENT ON COLUMN CATEGORIAS_PRODUTOS.NOME IS 'Nome da categoria';
COMMENT ON COLUMN CATEGORIAS_PRODUTOS.DESCRICAO IS 'Descrição adicional da categoria';

CREATE TABLE IF NOT EXISTS EMPRESAS(
ID_EMPRESA SERIAL NOT NULL,
NOME VARCHAR(50) NOT NULL,
INSCRICAO VARCHAR(14) NOT NULL,
DESCRICAO VARCHAR(100),
CONSTRAINT PK_EMPRESAS PRIMARY KEY(ID_EMPRESA)
);

COMMENT ON TABLE EMPRESAS IS 'Cadastro de empresas';
COMMENT ON COLUMN EMPRESAS.ID_EMPRESA IS 'Chave primária';
COMMENT ON COLUMN EMPRESAS.NOME IS 'Nome da empresa';
COMMENT ON COLUMN EMPRESAS.INSCRICAO IS 'CNPJ, CPF';
COMMENT ON COLUMN EMPRESAS.DESCRICAO IS 'Descrição adicional da empresa';

CREATE TABLE IF NOT EXISTS UNIDADES_MEDIDA(
ID_UNIDADE SERIAL NOT NULL,
NOME VARCHAR(50) NOT NULL,
DESCRICAO VARCHAR(100),
CONSTRAINT PK_UNIDADES_MEDIDA PRIMARY KEY(ID_UNIDADE)
);

COMMENT ON TABLE UNIDADES_MEDIDA IS 'Cadastro de unidades de medida';
COMMENT ON COLUMN UNIDADES_MEDIDA.NOME IS 'Nome da unidade de medida';
COMMENT ON COLUMN UNIDADES_MEDIDA.DESCRICAO IS 'Descrição adicional da unidade';

CREATE TABLE IF NOT EXISTS PRODUTOS(
ID_PRODUTO SERIAL NOT NULL,
ID_UNIDADE INTEGER NOT NULL,
ID_CATEGORIA INTEGER NOT NULL,
NOME VARCHAR(50) NOT NULL, 
DESCRICAO VARCHAR(100),
CONSTRAINT PK_PRODUTOS PRIMARY KEY(ID_PRODUTO),
CONSTRAINT FK_PROD_UNID_MED FOREIGN KEY(ID_UNIDADE) REFERENCES UNIDADES_MEDIDA(ID_UNIDADE),
CONSTRAINT FK_PROD_CATEG_PROD FOREIGN KEY(ID_CATEGORIA) REFERENCES CATEGORIAS_PRODUTOS(ID_CATEGORIA)
);

COMMENT ON TABLE PRODUTOS IS 'Cadastro de produtos';
COMMENT ON COLUMN PRODUTOS.ID_PRODUTO IS 'Chave primária';
COMMENT ON COLUMN PRODUTOS.ID_UNIDADE IS 'Chave estrangeira - Unidade de medida do produto';
COMMENT ON COLUMN PRODUTOS.ID_CATEGORIA IS 'Chave estrangeira - Categoria ao qual pertence o produto';
COMMENT ON COLUMN PRODUTOS.NOME IS 'Nome do produto';
COMMENT ON COLUMN PRODUTOS.DESCRICAO IS 'Descrição adicional do produto';

CREATE TABLE IF NOT EXISTS BANCOS(
ID_BANCO SERIAL NOT NULL,
ID_EMPRESA INTEGER NOT NULL,
NOME VARCHAR(50) NOT NULL,
CODIGO INTEGER NOT NULL,
LOGO VARCHAR(200),
CONSTRAINT PK_BANCOS PRIMARY KEY(ID_BANCO),
CONSTRAINT FK_BANCOS_EMPRESAS FOREIGN KEY(ID_EMPRESA) REFERENCES EMPRESAS(ID_EMPRESA)
);

COMMENT ON TABLE BANCOS IS 'Cadastro de bancos';
COMMENT ON COLUMN BANCOS.ID_BANCO IS 'Chave primária';
COMMENT ON COLUMN BANCOS.ID_EMPRESA IS 'Chave estrangeira - Empresa vinculada ao banco';
COMMENT ON COLUMN BANCOS.NOME IS 'Nome do banco';
COMMENT ON COLUMN BANCOS.CODIGO IS 'Código do banco';
COMMENT ON COLUMN BANCOS.LOGO IS 'Caminho do logotipo do banco';

CREATE TABLE IF NOT EXISTS AGENCIAS(
ID_AGENCIA SERIAL NOT NULL,
ID_BANCO INTEGER NOT NULL,
NUMERO INTEGER NOT NULL,
DIGITO_VERIFICADOR INTEGER NOT NULL,
CONSTRAINT PK_AGENCIAS PRIMARY KEY(ID_AGENCIA),
CONSTRAINT FK_AGENCIAS_BANCOS FOREIGN KEY(ID_BANCO) REFERENCES BANCOS(ID_BANCO)
);

COMMENT ON TABLE AGENCIAS IS 'Cadastro de agências bancárias';
COMMENT ON COLUMN AGENCIAS.ID_AGENCIA IS 'Chave primária';
COMMENT ON COLUMN AGENCIAS.ID_BANCO IS 'Chave estrangeira - Banco ao qual pertence a agência';
COMMENT ON COLUMN AGENCIAS.NUMERO IS 'Número da agência';
COMMENT ON COLUMN AGENCIAS.DIGITO_VERIFICADOR IS 'Digito verificador da agência';

CREATE TABLE IF NOT EXISTS CONTAS_CORRENTE(
ID_CONTA SERIAL NOT NULL,
ID_AGENCIA INTEGER NOT NULL,
ID_USUARIO INTEGER NOT NULL,
NUMERO INTEGER NOT NULL,
DIGITO_VERIFICADOR INTEGER NOT NULL,
SALDO_ANTERIOR NUMERIC(12,2) NOT NULL,
SALDO NUMERIC(12,2) NOT NULL,
CHEQUE_ESPECIAL NUMERIC(12,2) NOT NULL,
ATIVO BOOLEAN DEFAULT TRUE,
CONSTRAINT PK_CONTAS_CORRENTE PRIMARY KEY(ID_CONTA),
CONSTRAINT FK_CONTAS_CORRENTE_AGENCIAS FOREIGN KEY(ID_AGENCIA) REFERENCES AGENCIAS(ID_AGENCIA),
CONSTRAINT FK_CONTAS_CORRENTE_USUARIOS FOREIGN KEY(ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
);

COMMENT ON TABLE CONTAS_CORRENTE IS 'Cadastro de contas correntes';
COMMENT ON COLUMN CONTAS_CORRENTE.ID_CONTA IS 'Chave primária';
COMMENT ON COLUMN CONTAS_CORRENTE.ID_AGENCIA IS 'Chave estrangeira - Agência ao qual pertence a conta';
COMMENT ON COLUMN CONTAS_CORRENTE.NUMERO IS 'Número da conta corrente';
COMMENT ON COLUMN CONTAS_CORRENTE.DIGITO_VERIFICADOR IS 'Digito verificador da conta corrente';
COMMENT ON COLUMN CONTAS_CORRENTE.SALDO_ANTERIOR IS 'Saldo anterior da conta corrente';
COMMENT ON COLUMN CONTAS_CORRENTE.SALDO IS 'Saldo da conta corrente';
COMMENT ON COLUMN CONTAS_CORRENTE.CHEQUE_ESPECIAL IS 'Valor disponível para contratar cheque especial';
COMMENT ON COLUMN CONTAS_CORRENTE.ATIVO IS 'Indica se a conta corrente está ativa(0 = inativa, 1 = ativa)';

CREATE TABLE IF NOT EXISTS CUSTOS_CONTA_CORRENTE(
ID_CUSTO SERIAL NOT NULL,
ID_CONTA INTEGER NOT NULL,
VALOR_MANUTENCAO NUMERIC(12,2) NOT NULL,
TAXA_CREDITO_ESPECIAL NUMERIC(12,2),
TAXA_TED NUMERIC(12,2),
TAXA_DOC NUMERIC(12,2),
CONSTRAINT PK_CUSTOS_CONTA_CORRENTE PRIMARY KEY(ID_CUSTO, ID_CONTA),
CONSTRAINT FK_CUST_CTA_CORR_CTA_CORR FOREIGN KEY(ID_CONTA) REFERENCES CONTAS_CORRENTE(ID_CONTA)
);

COMMENT ON TABLE CUSTOS_CONTA_CORRENTE IS 'Cadastro de bandeiras de cartões de crédito';
COMMENT ON COLUMN CUSTOS_CONTA_CORRENTE.ID_CUSTO IS 'Chave primária composta';
COMMENT ON COLUMN CUSTOS_CONTA_CORRENTE.ID_CONTA IS 'Chave primária composta';
COMMENT ON COLUMN CUSTOS_CONTA_CORRENTE.VALOR_MANUTENCAO IS 'Valor de manutenção da conta';
COMMENT ON COLUMN CUSTOS_CONTA_CORRENTE.TAXA_CREDITO_ESPECIAL IS 'Taxa de juros do crédito especial';
COMMENT ON COLUMN CUSTOS_CONTA_CORRENTE.TAXA_TED IS 'Taxa de transferência bancária TED';
COMMENT ON COLUMN CUSTOS_CONTA_CORRENTE.TAXA_DOC IS 'Taxa de transferência bancária DOC';

CREATE TABLE IF NOT EXISTS BANDEIRAS(
ID_BANDEIRA SERIAL NOT NULL,
NOME VARCHAR(20) NOT NULL,
LOGOTIPO VARCHAR(200),
CONSTRAINT PK_BANDEIRAS PRIMARY KEY(ID_BANDEIRA)
);

COMMENT ON TABLE BANDEIRAS IS 'Cadastro de bandeiras de cartões de crédito';
COMMENT ON COLUMN BANDEIRAS.ID_BANDEIRA IS 'Chave primária';
COMMENT ON COLUMN BANDEIRAS.NOME IS 'Nome da bandeira';
COMMENT ON COLUMN BANDEIRAS.LOGOTIPO IS 'Simbolo/logotipo da bandeira';

CREATE TABLE IF NOT EXISTS CARTOES_CREDITO(
ID_CARTAO SERIAL NOT NULL,
ID_BANDEIRA INTEGER NOT NULL,
ID_CONTA INTEGER NOT NULL,
NUMERO VARCHAR(30) NOT NULL,
LIMITE NUMERIC(12,2) NOT NULL,
LIMITE_UTILIZADO NUMERIC(12,2) NOT NULL,
DIA_VENCTO INTEGER NOT NULL,
FECHAMENTO INTEGER NOT NULL,
VALIDADE DATE NOT NULL,
DEBITO_AUTOMATICO BOOLEAN NOT NULL,
ATIVO BOOLEAN DEFAULT TRUE,
CONSTRAINT PK_CARTOES_CREDITO PRIMARY KEY(ID_CARTAO),
CONSTRAINT FK_CART_CRED_BANDEIRAS FOREIGN KEY(ID_BANDEIRA) REFERENCES BANDEIRAS(ID_BANDEIRA),
CONSTRAINT FK_CART_CRED_CTA_COR FOREIGN KEY(ID_CONTA) REFERENCES CONTAS_CORRENTE(ID_CONTA)
);

COMMENT ON TABLE CARTOES_CREDITO IS 'Cadastro de cartões de crédito';
COMMENT ON COLUMN CARTOES_CREDITO.ID_CARTAO IS 'Chave primária';
COMMENT ON COLUMN CARTOES_CREDITO.ID_BANDEIRA IS 'Chave estrangeira - Bandeira a qual pertence o cartão';
COMMENT ON COLUMN CARTOES_CREDITO.ID_CONTA IS 'Chave estrangeira - Conta corrente ao qual pertence o cartão';
COMMENT ON COLUMN CARTOES_CREDITO.NUMERO IS 'Número do cartão de crédito';
COMMENT ON COLUMN CARTOES_CREDITO.LIMITE IS 'Limite total do cartão';
COMMENT ON COLUMN CARTOES_CREDITO.LIMITE_UTILIZADO IS 'Limite disponivel para ser utilizado';
COMMENT ON COLUMN CARTOES_CREDITO.DIA_VENCTO IS 'Dia de vencimento da fatura do cartão';
COMMENT ON COLUMN CARTOES_CREDITO.FECHAMENTO IS 'Quantidade de dias para fechar a fatura';
COMMENT ON COLUMN CARTOES_CREDITO.DEBITO_AUTOMATICO IS 'Indica se a fatura será debitada em conta corrente(0 - Não, 1 - Sim)';
COMMENT ON COLUMN CARTOES_CREDITO.VALIDADE IS 'Indica a validade do cartão';
COMMENT ON COLUMN CARTOES_CREDITO.ATIVO IS 'Indica se o cartão está ativo ou cancelado(0 - cancelado, 1 - ativo)';

CREATE TABLE IF NOT EXISTS EVENTOS(
ID_EVENTO SERIAL NOT NULL,
NOME VARCHAR(50) NOT NULL,
TIPO CHAR(1) NOT NULL,
DESCRICAO VARCHAR(100),
CONSTRAINT PK_EVENTOS PRIMARY KEY(ID_EVENTO)
);

COMMENT ON TABLE EVENTOS IS 'Cadastro de eventos a serem vinculados a um recebimento';
COMMENT ON COLUMN EVENTOS.ID_EVENTO IS 'Chave primária'; 
COMMENT ON COLUMN EVENTOS.NOME IS 'Nome do evento';
COMMENT ON COLUMN EVENTOS.TIPO IS 'P - Provento, D - Desconto';
COMMENT ON COLUMN EVENTOS.DESCRICAO IS 'Descrição adicional do evento';

CREATE TABLE IF NOT EXISTS LANCTOS_CONTABEIS(
ID_LANCTO SERIAL NOT NULL,
ID_EMPRESA INTEGER NOT NULL,
ID_USUARIO INTEGER NOT NULL,
ID_LANCTO_ENT INTEGER DEFAULT NULL,
ID_CARTAO INTEGER DEFAULT NULL,
ID_CONTA INTEGER DEFAULT NULL,
ID_CONTA_DESTINO INTEGER DEFAULT NULL,
DT_LANCTO DATE NOT NULL,
TIPO_LANCTO CHAR(1) NOT NULL,
TIPO_PAGTO CHAR(1) NOT NULL,
ATIVO BOOLEAN DEFAULT TRUE,
PARCELAS INTEGER NOT NULL,
INICIO_VIGENCIA INTEGER NOT NULL,
VALOR NUMERIC(12,2) NOT NULL,
JUROS NUMERIC(12,2) NOT NULL,
VALOR_ENTRADA NUMERIC(12,2) NOT NULL,
DIA_PAGTO INTEGER NOT NULL,
DESCRICAO VARCHAR(100),
DT_REGISTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT PK_LANCTOS_CONTABEIS PRIMARY KEY(ID_LANCTO),
CONSTRAINT FK_LANCTOS_CONTABEIS_EMP FOREIGN KEY(ID_EMPRESA) REFERENCES EMPRESAS(ID_EMPRESA),
CONSTRAINT FK_LANCTOS_CONTABEIS_USU FOREIGN KEY(ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
CONSTRAINT FK_LAN_CONT_LAN_CONT_ENT FOREIGN KEY(ID_LANCTO_ENT) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO),
CONSTRAINT FK_LANCTOS_CONTABEIS_CARTAO FOREIGN KEY(ID_CARTAO) REFERENCES CARTOES_CREDITO(ID_CARTAO),
CONSTRAINT FK_LANCTOS_CONTABEIS_CONTA FOREIGN KEY(ID_CONTA) REFERENCES CONTAS_CORRENTE(ID_CONTA),
CONSTRAINT FK_LANCTOS_CONTABEIS_CTA_DESTINO FOREIGN KEY(ID_CONTA_DESTINO) REFERENCES CONTAS_CORRENTE(ID_CONTA)
);

COMMENT ON TABLE LANCTOS_CONTABEIS IS 'Cadastro de lançamentos de entrada e saída';
COMMENT ON COLUMN LANCTOS_CONTABEIS.ID_LANCTO IS 'Chave primária'; 
COMMENT ON COLUMN LANCTOS_CONTABEIS.ID_EMPRESA IS 'Chave estrangeira - Pagador';
COMMENT ON COLUMN LANCTOS_CONTABEIS.ID_USUARIO IS 'Usuário que fez o lançamento';
COMMENT ON COLUMN LANCTOS_CONTABEIS.DT_LANCTO IS 'Data em que foi realizado o lançamento';
COMMENT ON COLUMN LANCTOS_CONTABEIS.TIPO_LANCTO IS 'Tipo do lançamento (E - Entrada, S - Saída)';
COMMENT ON COLUMN LANCTOS_CONTABEIS.TIPO_PAGTO IS 'Tipo de pagamento/recebimento (F - fixo, A - à vista, P - parcelado, T - transferência bancária)';
COMMENT ON COLUMN LANCTOS_CONTABEIS.ATIVO IS '1 - ativo, 0 - inativo (Utilizado para identificar se o lancto fixo está vigente)';
COMMENT ON COLUMN LANCTOS_CONTABEIS.PARCELAS IS 'Número de parcelas será pago o lançamento';
COMMENT ON COLUMN LANCTOS_CONTABEIS.INICIO_VIGENCIA IS 'Quando começa a pagar/receber(0 = mesmo mês, 1 = próximo mês, etc)';
COMMENT ON COLUMN LANCTOS_CONTABEIS.VALOR IS 'Valor total do lançamento';
COMMENT ON COLUMN LANCTOS_CONTABEIS.JUROS IS 'Juros em cima do valor parcelado';
COMMENT ON COLUMN LANCTOS_CONTABEIS.VALOR_ENTRADA IS 'Valor de entrada dado no lançamento';
COMMENT ON COLUMN LANCTOS_CONTABEIS.DIA_PAGTO IS 'Dia do pagamento/recebimento';
COMMENT ON COLUMN LANCTOS_CONTABEIS.DESCRICAO IS 'Descrição adicional do pagamento/recebimento';

CREATE TABLE IF NOT EXISTS EVENTOS_LANCTO_CONTABIL(
ID_LANCTO INTEGER NOT NULL,
ID_EVENTO INTEGER NOT NULL,
VALOR NUMERIC(12,2) NOT NULL,
QUANTIDADE INTEGER NOT NULL,
CONSTRAINT PK_EVE_LANCTO_CONTABIL PRIMARY KEY(ID_LANCTO, ID_EVENTO),
CONSTRAINT FK_EVE_LAN_CONT_LAN_CONT FOREIGN KEY(ID_LANCTO) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO),
CONSTRAINT FK_EVE_LAN_CONT_EVENTOS FOREIGN KEY(ID_EVENTO) REFERENCES EVENTOS(ID_EVENTO)
);

COMMENT ON TABLE EVENTOS_LANCTO_CONTABIL IS 'Cadastro de eventos vinculados ao lançamento de entrada';
COMMENT ON COLUMN EVENTOS_LANCTO_CONTABIL.ID_LANCTO IS 'Chave primária composta - lançamento de saída';
COMMENT ON COLUMN EVENTOS_LANCTO_CONTABIL.ID_EVENTO IS 'Chave primária composta - evento vinculado ao lançamento';
COMMENT ON COLUMN EVENTOS_LANCTO_CONTABIL.VALOR IS 'Valor do evento lançado';
COMMENT ON COLUMN EVENTOS_LANCTO_CONTABIL.QUANTIDADE IS 'Quantidade do evento lançado';

CREATE TABLE IF NOT EXISTS FATURAS(
ID_FATURA SERIAL NOT NULL,
ID_EMPRESA INTEGER NOT NULL,
VENCIMENTO DATE NOT NULL,
VALOR NUMERIC(12,2) NOT NULL,
CONSTRAINT PK_FATURAS PRIMARY KEY(ID_FATURA),
CONSTRAINT FK_FATURAS_EMPRESAS FOREIGN KEY(ID_EMPRESA) REFERENCES EMPRESAS(ID_EMPRESA)
); 

COMMENT ON TABLE FATURAS IS 'Cadastro de faturas geradas pelos lançamentos de saída com cartão de crédito';
COMMENT ON COLUMN FATURAS.ID_FATURA IS 'Chave primária';
COMMENT ON COLUMN FATURAS.ID_EMPRESA IS 'Chave estrangeira - Empresa vinculada ao banco';
COMMENT ON COLUMN FATURAS.VENCIMENTO IS 'Vencimento da fatura';
COMMENT ON COLUMN FATURAS.VALOR IS 'Valor da fatura';

CREATE TABLE IF NOT EXISTS PRODUTOS_LANCTO_CONTABIL(
ID_LANCTO INTEGER NOT NULL,
ID_PRODUTO INTEGER NOT NULL,
VALOR NUMERIC(12,2) NOT NULL,
QUANTIDADE NUMERIC(12,2) NOT NULL,
CONSTRAINT PK_PROD_LANCTO_CONTABIL PRIMARY KEY(ID_LANCTO, ID_PRODUTO),
CONSTRAINT FK_PROD_LAN_CONT_LAN_CONT FOREIGN KEY(ID_LANCTO) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO),
CONSTRAINT FK_PROD_LAN_CONT_PRODUTOS FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTOS(ID_PRODUTO)
);

COMMENT ON TABLE PRODUTOS_LANCTO_CONTABIL IS 'Cadastro de produtos vinculados ao lançamento de saída';
COMMENT ON COLUMN PRODUTOS_LANCTO_CONTABIL.ID_LANCTO IS 'Chave primária composta - lançamento de saída';
COMMENT ON COLUMN PRODUTOS_LANCTO_CONTABIL.ID_PRODUTO IS 'Chave primária composta - produto vinculado ao lançamento';
COMMENT ON COLUMN PRODUTOS_LANCTO_CONTABIL.VALOR IS 'Valor do produto lançado';
COMMENT ON COLUMN PRODUTOS_LANCTO_CONTABIL.QUANTIDADE IS 'Quantidade do produto lançado';

CREATE TABLE IF NOT EXISTS PARCELAS_LANCTO_CONTABIL(
ID_PARCELA SERIAL NOT NULL,
ID_LANCTO INTEGER NOT NULL,
ID_FATURA INTEGER DEFAULT NULL,
VENCIMENTO DATE NOT NULL,
PARCELA INTEGER NOT NULL,
VALOR NUMERIC(12,2) NOT NULL,
CONSTRAINT PK_PARCELAS_LANCTOS_CONT PRIMARY KEY(ID_PARCELA),
CONSTRAINT FK_PARC_LAN_CONT_LAN_CONT FOREIGN KEY(ID_LANCTO) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO),
CONSTRAINT FK_PARC_LAN_CONT_FATURAS FOREIGN KEY(ID_FATURA) REFERENCES FATURAS(ID_FATURA)
); 

COMMENT ON TABLE PARCELAS_LANCTO_CONTABIL IS 'Cadastro de parcelas geradas pelos lançamentos contábeis';
COMMENT ON COLUMN PARCELAS_LANCTO_CONTABIL.ID_PARCELA IS 'Chave primária';
COMMENT ON COLUMN PARCELAS_LANCTO_CONTABIL.ID_LANCTO IS 'Lançamento contábil vinculado a parcela';
COMMENT ON COLUMN PARCELAS_LANCTO_CONTABIL.ID_FATURA IS 'Indica que a parcela gera uma fatura';
COMMENT ON COLUMN PARCELAS_LANCTO_CONTABIL.VENCIMENTO IS 'Vencimento da parcela';
COMMENT ON COLUMN PARCELAS_LANCTO_CONTABIL.PARCELA IS 'Número da parcela';
COMMENT ON COLUMN PARCELAS_LANCTO_CONTABIL.VALOR IS 'Valor da parcela';

CREATE TABLE IF NOT EXISTS PAGAMENTOS(
ID_PAGAMENTO SERIAL NOT NULL,
ID_FATURA INTEGER NOT NULL,
ID_CARTAO INTEGER DEFAULT NULL,
ID_CONTA INTEGER DEFAULT NULL,
VALOR NUMERIC(12,2) NOT NULL,
JUROS NUMERIC(12,2),
MULTA NUMERIC(12,2),
DESCONTO NUMERIC(12,2),
DT_PAGTO DATE,
TIPO_PAGTO CHAR(1) NOT NULL,
CONSTRAINT PK_PAGAMENTOS PRIMARY KEY(ID_PAGAMENTO),
CONSTRAINT FK_PAGAMENTOS_FATURAS FOREIGN KEY(ID_FATURA) REFERENCES FATURAS(ID_FATURA),
CONSTRAINT FK_PAGAMENTOS_CARTOES FOREIGN KEY(ID_CARTAO) REFERENCES CARTOES_CREDITO(ID_CARTAO),
CONSTRAINT FK_PAGAMENTOS_CONTAS FOREIGN KEY(ID_CONTA) REFERENCES CONTAS_CORRENTE(ID_CONTA)
); 

COMMENT ON TABLE PAGAMENTOS IS 'Cadastro de pagamentos';
COMMENT ON COLUMN PAGAMENTOS.ID_PAGAMENTO IS 'Chave primária'; 
COMMENT ON COLUMN PAGAMENTOS.ID_FATURA IS 'Fatura vinculada ao pagamento';
COMMENT ON COLUMN PAGAMENTOS.ID_CARTAO IS 'Cartão de crédito utilizado no pagamento';
COMMENT ON COLUMN PAGAMENTOS.ID_CONTA IS 'Conta corrente utilizada no pagamento';
COMMENT ON COLUMN PAGAMENTOS.VALOR IS 'Valor do pagamento';
COMMENT ON COLUMN PAGAMENTOS.JUROS IS 'Juros em cima do pagamento';
COMMENT ON COLUMN PAGAMENTOS.MULTA IS 'Multa em cima do pagamento';
COMMENT ON COLUMN PAGAMENTOS.DESCONTO IS 'Desconto em cima do pagamento';
COMMENT ON COLUMN PAGAMENTOS.DT_PAGTO IS 'Data em que foi realizado o pagamento';
COMMENT ON COLUMN PAGAMENTOS.TIPO_PAGTO IS 'Tipo de pagamento/recebimento (T - Total, P - Parcial)';

CREATE TABLE IF NOT EXISTS SAIDAS_LANCTO_ENTRADA(
ID_LANCTO INTEGER NOT NULL,
ID_PARCELA INTEGER NOT NULL,
CONSTRAINT PK_SAIDAS_LANCTO_ENTRADA PRIMARY KEY(ID_LANCTO, ID_PARCELA),
CONSTRAINT FK_SAIDAS_LAN_ENT_LAN_CONT FOREIGN KEY(ID_LANCTO) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO),
CONSTRAINT FK_SAIDAS_LAN_ENT_PAR_LAN_CON FOREIGN KEY(ID_PARCELA) REFERENCES PARCELAS_LANCTO_CONTABIL(ID_PARCELA)
);

COMMENT ON TABLE SAIDAS_LANCTO_ENTRADA IS 'Cadastro de lançamentos de saída vinculados ao lançamento de entrada';
COMMENT ON COLUMN SAIDAS_LANCTO_ENTRADA.ID_LANCTO IS 'Chave primária composta - lançamento contábil de entrada';
COMMENT ON COLUMN SAIDAS_LANCTO_ENTRADA.ID_PARCELA IS 'Chave primária composta - parcela do lançamento de saída vinculado ao de entrada';

CREATE TABLE IF NOT EXISTS DOCUMENTOS_LANCTO_CONTABIL(
ID_DOCUMENTO SERIAL NOT NULL,
ID_LANCTO INTEGER NOT NULL,
NOME VARCHAR(50) NOT NULL,
DOCUMENTO VARCHAR(100),
UPLOAD BOOLEAN DEFAULT FALSE NOT NULL,
NUMERO_TENTATIVAS_REALIZADAS INTEGER DEFAULT 0 NOT NULL,
DATA_PROXIMA_EXECUCAO TIMESTAMP,
CONSTRAINT PK_DOC_LANCTO_CONTABIL PRIMARY KEY(ID_DOCUMENTO),
CONSTRAINT FK_DOC_LAN_CONT_LAN_CONT FOREIGN KEY(ID_LANCTO) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO)
);

COMMENT ON TABLE DOCUMENTOS_LANCTO_CONTABIL IS 'Tabela que armazena documentos vinculados a lançamentos contábeis';
COMMENT ON COLUMN DOCUMENTOS_LANCTO_CONTABIL.ID_DOCUMENTO IS 'Chave primária';
COMMENT ON COLUMN DOCUMENTOS_LANCTO_CONTABIL.ID_LANCTO IS 'Chave estrangeira da tabela lancto contábil';
COMMENT ON COLUMN DOCUMENTOS_LANCTO_CONTABIL.NOME IS 'Nome do documento';
COMMENT ON COLUMN DOCUMENTOS_LANCTO_CONTABIL.DOCUMENTO IS 'ID do documento';
COMMENT ON COLUMN DOCUMENTOS_LANCTO_CONTABIL.UPLOAD IS 'Indica se o documento foi enviado para a nuvem';

CREATE TABLE IF NOT EXISTS DOCUMENTOS_PAGAMENTOS(
ID_DOCUMENTO SERIAL NOT NULL,
ID_PAGAMENTO INTEGER NOT NULL,
NOME VARCHAR(50) NOT NULL,
DOCUMENTO VARCHAR(100),
UPLOAD BOOLEAN DEFAULT FALSE NOT NULL,
NUMERO_TENTATIVAS_REALIZADAS INTEGER DEFAULT 0 NOT NULL,
DATA_PROXIMA_EXECUCAO TIMESTAMP,
CONSTRAINT PK_DOC_PARC_LAN_CONT PRIMARY KEY(ID_DOCUMENTO),
CONSTRAINT FK_DOC_PAGAMENTOS FOREIGN KEY(ID_PAGAMENTO) REFERENCES PAGAMENTOS(ID_PAGAMENTO)
);

COMMENT ON TABLE DOCUMENTOS_PAGAMENTOS IS 'Tabela que armazena documentos vinculados ao pagamento de faturas';
COMMENT ON COLUMN DOCUMENTOS_PAGAMENTOS.ID_DOCUMENTO IS 'Chave primária';
COMMENT ON COLUMN DOCUMENTOS_PAGAMENTOS.ID_PAGAMENTO IS 'Chave estrangeira da tabela de pagamentos';
COMMENT ON COLUMN DOCUMENTOS_PAGAMENTOS.NOME IS 'Nome do documento';
COMMENT ON COLUMN DOCUMENTOS_PAGAMENTOS.DOCUMENTO IS 'ID do documento';
COMMENT ON COLUMN DOCUMENTOS_PAGAMENTOS.UPLOAD IS 'Indica se o documento foi enviado para a nuvem';

CREATE TABLE IF NOT EXISTS EXTRATOS_BANCARIOS(
ID_EXTRATO SERIAL NOT NULL,
ID_CONTA INTEGER NOT NULL,
ID_PAGAMENTO INTEGER DEFAULT NULL,
OPERACAO CHAR(1) NOT NULL,
HISTORICO VARCHAR(100) NOT NULL,
DT_OPERACAO DATE NOT NULL,
SALDO NUMERIC(12,2) NOT NULL,
CONSTRAINT PK_EXTRATOS_BANCARIOS PRIMARY KEY(ID_EXTRATO),
CONSTRAINT FK_EXT_BANC_CTA_COR FOREIGN KEY(ID_CONTA) REFERENCES CONTAS_CORRENTE(ID_CONTA),
CONSTRAINT FK_EX_BAN_PAGAMENTOS FOREIGN KEY(ID_PAGAMENTO) REFERENCES PAGAMENTOS(ID_PAGAMENTO)
);

COMMENT ON TABLE EXTRATOS_BANCARIOS IS 'Cadastro de extratos bancários';
COMMENT ON COLUMN EXTRATOS_BANCARIOS.ID_EXTRATO IS 'Chave primária';
COMMENT ON COLUMN EXTRATOS_BANCARIOS.ID_CONTA IS 'Chave estrangeira - Conta corrente ao qual pertence o extrato';
COMMENT ON COLUMN EXTRATOS_BANCARIOS.ID_PAGAMENTO IS 'Indica a qual pagamento o extrato está vinculado';
COMMENT ON COLUMN EXTRATOS_BANCARIOS.OPERACAO IS 'Tipo de operação (E - Entrada, S - Saída)';
COMMENT ON COLUMN EXTRATOS_BANCARIOS.HISTORICO IS 'Descrição da operação realizada';
COMMENT ON COLUMN EXTRATOS_BANCARIOS.DT_OPERACAO IS 'Data da operação';
COMMENT ON COLUMN EXTRATOS_BANCARIOS.SALDO IS 'Saldo constante na data da operação';

CREATE TABLE IF NOT EXISTS TRANSFERENCIAS_BANCARIAS(
ID_LANCTO_ORIGEM INTEGER NOT NULL,
ID_LANCTO_DESTINO INTEGER NOT NULL,
CONSTRAINT PK_TRANSFERENCIAS_BANCARIAS PRIMARY KEY(ID_LANCTO_ORIGEM, ID_LANCTO_DESTINO),
CONSTRAINT FK_TRANSF_BANC_LAN_ORIG FOREIGN KEY(ID_LANCTO_ORIGEM) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO),
CONSTRAINT FK_TRANSF_BANC_LAN_DEST FOREIGN KEY(ID_LANCTO_DESTINO) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO)
);

COMMENT ON TABLE TRANSFERENCIAS_BANCARIAS IS 'Cadastro de transferências bancárias';
COMMENT ON COLUMN TRANSFERENCIAS_BANCARIAS.ID_LANCTO_ORIGEM IS 'Indica a qual lançamento de saída a transferência está vinculada';
COMMENT ON COLUMN TRANSFERENCIAS_BANCARIAS.ID_LANCTO_DESTINO IS 'Indica a qual lançamento de entrada a transferência está vinculada';

CREATE TABLE IF NOT EXISTS RENEGOCIACOES(
ID_PARCELA INTEGER NOT NULL,
ID_LANCTO INTEGER NOT NULL,
CONSTRAINT PK_RENEGOCIACOES PRIMARY KEY(ID_PARCELA, ID_LANCTO),
CONSTRAINT FK_RENEG_PAR_LAN_CONT FOREIGN KEY(ID_PARCELA) REFERENCES PARCELAS_LANCTO_CONTABIL(ID_PARCELA),
CONSTRAINT FK_RENEG_LANCTO_CONT FOREIGN KEY(ID_LANCTO) REFERENCES LANCTOS_CONTABEIS(ID_LANCTO)
);

COMMENT ON TABLE RENEGOCIACOES IS 'Vinculo entre parcela e lançamento de renegociação';
COMMENT ON COLUMN RENEGOCIACOES.ID_PARCELA IS 'Chave estrangeira - Parcela que gerou a renegociação';
COMMENT ON COLUMN RENEGOCIACOES.ID_LANCTO IS 'Chave estrangeira - Lançamento vinculado a renegociação';

CREATE TABLE IF NOT EXISTS PERIODIC_ACTIONS(
ID_PERIODIC SERIAL NOT NULL,
NOME VARCHAR(50) NOT NULL,
INTERVALO INTEGER NOT NULL,
DELAY INTEGER NOT NULL,
ULTIMA_EXECUCAO TIMESTAMP NOT NULL,
ATIVO BOOLEAN NOT NULL,
QUANTIDADE_MAXIMA_EXECUCOES INTEGER NOT NULL DEFAULT 4,
CONSTRAINT PK_PERIODIC_ACTIONS PRIMARY KEY(ID_PERIODIC)
);

COMMENT ON TABLE PERIODIC_ACTIONS IS 'Cadastro de rotinas automáticas';
COMMENT ON COLUMN PERIODIC_ACTIONS.ID_PERIODIC IS 'Chave primária';
COMMENT ON COLUMN PERIODIC_ACTIONS.NOME IS 'Nome da rotina';
COMMENT ON COLUMN PERIODIC_ACTIONS.INTERVALO IS 'Intervalo de tempo em que a rotina é executada';
COMMENT ON COLUMN PERIODIC_ACTIONS.DELAY IS 'Intervalo de tempo para o início da execução da rotina';
COMMENT ON COLUMN PERIODIC_ACTIONS.ULTIMA_EXECUCAO IS 'Ultima execução da rotina';
COMMENT ON COLUMN PERIODIC_ACTIONS.ATIVO IS 'Indica se a rotina está ativa';
COMMENT ON COLUMN PERIODIC_ACTIONS.QUANTIDADE_MAXIMA_EXECUCOES IS 'Indica o numero de tentativas de execução do registro';


CREATE TABLE IF NOT EXISTS PERMISSOES(
ID_PERMISSAO SERIAL NOT NULL,
NOME VARCHAR(50) NOT NULL,
DESCRICAO VARCHAR(100),
CONSTRAINT PK_PERMISSOES PRIMARY KEY(ID_PERMISSAO)
);

CREATE TABLE IF NOT EXISTS RECURSOS(
ID_RECURSO SERIAL NOT NULL,
ACAO INTEGER NOT NULL,
RECURSO VARCHAR(200) NOT NULL,
CONSTRAINT PK_RECURSOS PRIMARY KEY(ID_RECURSO)
);

CREATE TABLE IF NOT EXISTS PERMISSOES_RECURSO(
ID_PERMISSAO INTEGER NOT NULL,
ID_RECURSO INTEGER NOT NULL,
CONSTRAINT PK_PERMISSOES_RECURSO PRIMARY KEY(ID_PERMISSAO, ID_RECURSO),
CONSTRAINT FK_PERMISSOES_RECURSO_PERMISSOES FOREIGN KEY(ID_PERMISSAO) REFERENCES PERMISSOES(ID_PERMISSAO),
CONSTRAINT FK_PERMISSOES_RECURSO_RECURSOS FOREIGN KEY(ID_RECURSO) REFERENCES RECURSOS(ID_RECURSO)
);

CREATE TABLE IF NOT EXISTS ROLES(
ID_ROLE SERIAL NOT NULL,
NOME VARCHAR(50) NOT NULL,
DESCRICAO VARCHAR(100),
CONSTRAINT PK_ROLES PRIMARY KEY(ID_ROLE)
);


CREATE TABLE IF NOT EXISTS PERMISSOES_ROLES(
ID_PERMISSAO INTEGER NOT NULL,
ID_ROLE INTEGER NOT NULL,
CONSTRAINT PK_PERMISSOES_ROLES PRIMARY KEY(ID_PERMISSAO, ID_ROLE),
CONSTRAINT FK_PERMISSOES_ROLES_PERMISSOES FOREIGN KEY(ID_PERMISSAO) REFERENCES PERMISSOES(ID_PERMISSAO),
CONSTRAINT FK_PERMISSOES_ROLES_ROLES FOREIGN KEY(ID_ROLE) REFERENCES ROLES(ID_ROLE)
);

CREATE TABLE IF NOT EXISTS USUARIOS_ROLES(
ID_USUARIO INTEGER NOT NULL,
ID_ROLE INTEGER NOT NULL,
CONSTRAINT PK_USUARIOS_ROLES PRIMARY KEY(ID_USUARIO, ID_ROLE),
CONSTRAINT FK_USUARIOS_ROLES_USUARIOS FOREIGN KEY(ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
CONSTRAINT FK_USUARIOS_ROLES_ROLES FOREIGN KEY(ID_ROLE) REFERENCES ROLES(ID_ROLE)
);

CREATE TABLE IF NOT EXISTS PERIODIC_ACTIONS_CONFIGURACOES_INTERVALO_EXECUCAO(
ID_CONFIGURACAO SERIAL NOT NULL,
ID_PERIODIC INTEGER NOT NULL,
INTERVALO_MINUTOS INTEGER NOT NULL,
ORDEM INTEGER NOT NULL,
CONSTRAINT PK_PERIODIC_CONF_INT_EXEC PRIMARY KEY(ID_CONFIGURACAO),
CONSTRAINT FK_PERIODIC_CONF_PER_ACTION FOREIGN KEY(ID_PERIODIC) REFERENCES PERIODIC_ACTIONS(ID_PERIODIC)
);